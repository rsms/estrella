#!/usr/bin/env node
const { build, watch, cliopts, glob, file, log } = require("estrella")
const fs = require("fs")
const pjoin = require("path").join
const CoffeeScript = require("coffeescript")

// directory where we will write js files generated by CoffeeScript
const jsdir = "tmp"

// 1. Compile all .coffee files to .js files.
// 2. Using esbuild, compile .js files into a bundle.
// 3. In watch mode, recompile as coffee and js files change.
compileCoffeScripts(glob("*.coffee")).then(() => {
  const { rebuild } = build({
    entry:   pjoin(jsdir, "main.coffee.js"),
    outfile: pjoin("out", "main.js"),
    sourcemap: true,
    bundle: true, // generate a single JS file
    clear: false, // do not clear the terminal when running interactively
  })
  if (cliopts.watch) {
    watch(".", {filter:/\.coffee$/i}, changes =>
      compileCoffeScripts(changes.map(c => c.name)).then(rebuild))
  }
})

// compileCoffeScripts compiles all provided .coffee files.
// Returns true if all succeeded.
function compileCoffeScripts(files) {
  return Promise.all(files.map(compileCoffeeScript)).then(v => {
    return v.every(ok => ok)
  })
}

// compileCoffeeScript compiles one .coffee file to a .js file. E.g.
//   foo/bar.coffee -> {jsdir}/foo/bar.coffee.js
// Returns true on success. On error, message is logged and false is returned.
async function compileCoffeeScript(filename) {
  const jsfile = pjoin(jsdir, filename + ".js")
  log.info("compiling", filename, "->", jsfile)
  const code = await file.read(filename, "utf8")
  try {
    const { js } = CoffeeScript.compile(code, {
      sourceMap: true,
      inlineMap: true,
      bare: true,
      filename,
    })
    // we use file.write instead of fs.writeFile since all file.* modification
    // functions coordinate with file watchers to make sure we don't "react" to
    // file modifications we did outselves; this avoids cycles.
    await file.write(jsfile, js, "utf8")
  } catch (err) {
    // CoffeeScript error objects contain a nicely formatted message
    console.error(err.toString())
    return false
  }
  return true
}
